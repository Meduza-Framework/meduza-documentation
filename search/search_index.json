{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the documentation for Meduza C2","text":"<p>Meduza is a modular, collaborative Command and Control (C2) framework developed using Golang for the teamserver, C# for the base agent, and ReactJS for the client. It is designed to be modular and adaptable with easy to swap interchangeable components.</p> <p></p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Modular Design: Meduza's architecture is designed to support components from many codebases and a variety of different functions making it ideal for the end user to adjust for personal preference and requirements.</li> <li>Collaborative Environment: The project is made with collaboration in mind, making team-based work easier by having a built-in chat feature and teams.</li> <li>Containerized and easy-to-deploy framework: One of Meduza's main features is that it's containerized, allowing quick and scalable deployments with no issues involving system support.</li> <li>Intuitive and easy to navigate user interface: Slick UI client coded in React.</li> <li>Modular listeners: As mentioned prior, listeners are modular. They include external and local deployments, making it possible to deploy listeners of any type.</li> <li>Modular payloads/agents: Modular loading of payloads including parameters for user interface for easy access and compilation of agents directly from the client.</li> <li>Agent modules: Agent modules for dynamic loading of assemblies and their dependencies during runtime (for C# agents only for now).</li> <li>Built-in MITRE ATT&amp;CK graph: MITRE ATT&amp;CK graph providing easy access to adversary tactics and techniques.</li> <li>Jupyter notebook: A container running Jupyter notebook for scripting.</li> </ul> <p>To get started with Meduza, follow these steps:</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Installation and configuration: To install Meduza on your system: installation guide.</li> <li>Usage: For an in-depth dive on the usage of Meduza: usage guide.</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>Meduza is an open-source project. Any contributions are more than welcome. If you would like to contribute please check out the following:</p> <ul> <li>Our contribution guidelines.</li> <li>The issues on our GitHub repository.</li> </ul>"},{"location":"#license-and-liability","title":"License and Liability","text":"<p>This project is licensed under the BSD-3-Clause license</p> <p>Disclaimer: This tool is provided for educational purposes only. The contributors of this project assume no liability for any direct or indirect use, misuse, or consequences arising from its usage. Users are solely responsible for complying with all applicable laws and regulations.</p>"},{"location":"#more-information-and-contacts","title":"More information and contacts","text":"<ul> <li>GitHub repo: Meduza GitHub repository.</li> <li>GitHub organization: Meduza Framework.</li> <li>Contact me at: @KSeliadtsou or konstantinseliadtsou@gmail.com.</li> </ul>"},{"location":"change-log/","title":"Change Log","text":""},{"location":"change-log/#version-04","title":"Version 0.4","text":"<p>New Features and Functionality:</p> <ul> <li> Big changes to the listener system, featuring a new way of loading external listeners and a revamped service for built-in listeners (HTTP/S, TCP, SMB).<ul> <li>Moved the listener system to the listener service folder at <code>teamserver/internal/services/listener</code> including built-in listeners.</li> <li>Changed the way listeners are handled (removed tight coupling).</li> </ul> </li> <li> Big changes to the payload system. Payloads can be loaded no matter the codebase (No longer limited to dotnet only).<ul> <li>Modular agent loading no matter the codebase.</li> <li>Dynamic compilation parameter loading for the front-end.</li> <li>Dynamic payload compilation based on payload codebase.</li> </ul> </li> <li> Made module system specific only to agents with module loading support.</li> <li>Help command logic with dynamic loading of commands if modules are installed.</li> <li>Jupyter notebook implementation for scripting.<ul> <li>Docker container running Jupyter notebook.</li> <li>Environment variables for Jupyter notebook startup.</li> </ul> </li> <li> Module dependency loading following load order (only C# agent).</li> <li> Database migration system.</li> <li> New payload compilation types (DLL and Shellcode).</li> <li>Improved teams functionality</li> <li> Other module types for the C# Agent (Command, Persistence, Info, etc.).</li> <li> More functionality for the client.</li> <li> SSL/TLS certificate handling and loading.<ul> <li>Endpoints and handler for uploading SSL/TLS certificates to the server.</li> </ul> </li> <li> Improved C# Agent functionality (persistence, AV bypass and other important features).</li> </ul>"},{"location":"change-log/#version-03","title":"Version 0.3","text":"<p>New Features and Functionality:</p> <ul> <li>Agent authentication and check-in using the new check-in handler.</li> <li>Expanded API functionality (new endpoints for module, payload and agent management).</li> <li>Diffie-Hellman key exchange to establish a shared 32 byte key for bidirectional AES-256 encrypted communication using Galois/Counter Mode (GCM) for message integrity.</li> <li>Module loading for C# agents.</li> <li>Dependency loading during runtime for C# modules.<ul> <li>Modules are shipped with dependencies and loaded on the agent.</li> </ul> </li> <li>DAL logging and error handling improvements.<ul> <li>Standardized logging for DALs.</li> </ul> </li> <li>Improved unit testing for server components.</li> <li>Listener AutoStart functionality.</li> <li>Payload service for configuration and compilation of the C# agent.<ul> <li>Payload service for compiling the agent with different parameters.</li> </ul> </li> <li>Functional listener and login pages (client).</li> <li>Improved client authentication.<ul> <li>Standardized middleware.</li> <li>Fixed refresh token functionality.</li> </ul> </li> <li>\"multiplayer\" functionality.<ul> <li>API endpoints for <code>teams</code> CRUD operations.</li> <li>DAL for <code>teams</code> DB operations.</li> <li><code>team_handler.go</code> for managing <code>teams</code>.</li> </ul> </li> <li>Restructured and cleaned up code structure.<ul> <li>Standardized server return format.</li> <li>Standardized and parametrized API endpoints.</li> </ul> </li> </ul>"},{"location":"change-log/#version-02-mvp-expansion","title":"Version 0.2 (MVP Expansion)","text":"<p>New Features and Functionality:</p> <ul> <li>Migrated persistent storage functionality from Redis to use PostgreSQL only.</li> <li>Listener start/stop functionality implementation.<ul> <li><code>service.go</code> for listener lifecycle management.</li> <li>Environment variables for listener configuration. </li> </ul> </li> <li>Basic unit testing to the server component.<ul> <li>Handler unit tests in <code>/tests/handlers</code>.</li> <li>Mocks for unit tests in <code>/tests/mocks</code>.</li> </ul> </li> <li>Basic client functionality.<ul> <li>Login page, sidebar and custom components.</li> </ul> </li> <li>Revamped XOR Encryption/Decryption util.<ul> <li>Simplified <code>xor.go</code> to avoid decorator pattern.</li> </ul> </li> <li>Custom logger for the server at <code>/teamserver/pkg/logger</code>.</li> </ul>"},{"location":"change-log/#version-01-mvp","title":"Version 0.1 (MVP)","text":"<p>New Features and Functionality:</p> <ul> <li>Docker compose and initialization scripts to run containerized parts of the server.</li> <li>Basic Agent Service system.<ul> <li>Agent management API endpoints at <code>/api/v1/agents</code></li> <li><code>agent_handler.go</code> for listener side and client side agent changes.</li> <li>SQL queries for <code>agents</code>, <code>agent_config</code>, <code>agent_info</code> and <code>agent_task</code> table creation.</li> <li>DAL for agent DB operations.</li> </ul> </li> <li>Basic GO-based utilities.<ul> <li><code>env.go</code>, <code>strings.go</code>, <code>xor.go</code></li> </ul> </li> <li>Pgadmin4 for database management.<ul> <li>Docker container running pgadmin4.</li> <li>Environment variables for pgadmin4 startup.</li> </ul> </li> <li>Database implementation using PostgreSQL<ul> <li>Docker container running PostgreSQL.</li> <li>Environment variables for PostgreSQL startup.</li> </ul> </li> <li>Client authentication and client related services.<ul> <li>JWT based client authentication.</li> <li>API endpoints and middleware for client authentication.</li> </ul> </li> <li>Basic listener implementation (models only).<ul> <li>Listener models in <code>teamserver/models/listener.go</code></li> <li>SQL query for <code>listeners</code> table creation.</li> <li>DAL for listener DB operations.</li> <li><code>listener_handler.go</code> for listener management.</li> </ul> </li> <li>Redis for cache and persistent storage.<ul> <li>Docker container running redis.</li> <li>Environment variables for redis startup.</li> </ul> </li> <li>Live reloading using <code>Air</code>.</li> </ul>"},{"location":"environment/","title":"Environment","text":"<pre><code># teamserver conf\nTEAMSERVER_HOSTNAME=teamserver\nTEAMSERVER_PORT=8080\n\n# Possible values: dev || debug\nTEAMSERVER_MODE=dev\n\n# golang debug\nDLV_PORT=2345\n\n# listener exposed port range\nLISTENER_PORT_RANGE_START=8000\nLISTENER_PORT_RANGE_END=8010\n\n# postgres\nPOSTGRES_HOST=meduza-db\nPOSTGRES_PORT=5432\nPOSTGRES_NAME=postgres\nPOSTGRES_PASSWORD=postgres\nPOSTGRES_USER=postgres\nPOSTGRES_DB=meduza-db\nPOSTGRES_SCHEMA=meduza_schema\n\n# redis\nREDIS_HOST=meduza-redis\nREDIS_PORT=6379\nREDIS_PASSWORD=redis\n\n# pgadmin\nPGADMIN_DEFAULT_EMAIL=admin@meduza.dev\nPGADMIN_DEFAULT_PASSWORD=10tacles\n\n# jupyter\nJUPYTER_HOST=meduza-jupyter\nJUPYTER_PORT=8888\nJUPYTER_TOKEN=meduza\nJUPYTER_USE_VOLUME=true\nJUPYTER_BIND_LOCALHOST_ONLY=true\n\n# jwt secret\nJWT_SECRET=Cvha9XEuPLiadZT71i8gC0k9b7+pRCYzYvuM0z3+VFEt+1ZCIrocor5Irj/OTDEnDQ04TYgWY3HZbItrfiN9lQ==\n\n# refresh token cookie \nCOOKIE_PATH=/\n\nCOOKIE_DOMAIN=localhost \n\nREFRESH_SECURE=false\n\nREFRESH_HTTP=true\n\nMODULE_UPLOAD_PATH=./teamserver/modules\n\n# cert\nCERT_UPLOAD_PATH=./teamserver/certs\n</code></pre>"},{"location":"environment/#values","title":"Values","text":"<p>The <code>.env</code> file consists from:</p>"},{"location":"environment/#teamserver","title":"Teamserver","text":"<ul> <li><code>TEAMSERVER_HOSTNAME</code> - Sets the hostname for the teamserver to start on.</li> <li><code>TEAMSERVER_PORT</code> - Sets the port for the teamserver to bind to.</li> <li><code>TEAMSERVER_MODE</code> - Sets the running mode for the server between <code>dev</code> and <code>debug</code>. In case you're using the <code>TEAMSERVER_MODE=debug</code>, configure <code>DLV_PORT</code> env var and set up the Delve debugger client. Available Delve clients.</li> <li><code>DLV_PORT</code> - Sets the delve remote debugging port for debugging the teamserver.</li> </ul>"},{"location":"environment/#listeners","title":"Listeners","text":"<ul> <li><code>LISTENER_PORT_RANGE_START</code> - Sets the start of the range for ports, that listeners can bind to.</li> <li><code>LISTENER_PORT_RANGE_END</code> - Sets the end of the range for ports, that listeners can bind to.</li> </ul>"},{"location":"environment/#postgres","title":"Postgres","text":"<ul> <li><code>POSTGRES_HOST</code> - Set the PostgreSQL hostname.</li> <li><code>POSTGRES_PORT</code> - Sets the PostgreSQL port.</li> <li><code>POSTGRES_NAME</code> - Sets the PostgreSQL server name.</li> <li><code>POSTGRES_PASSWORD</code> - Sets the password for the PostgreSQL server.</li> <li><code>POSTGRES_USER</code> - Sets the PosgreSQL user name.</li> <li><code>POSTGRES_DB</code> - Sets the PostgreSQL DB name.</li> <li><code>POSTGRES_SCHEMA</code> - Sets the default PostgreSQL schema name.</li> </ul>"},{"location":"environment/#redis","title":"Redis","text":"<ul> <li><code>REDIS_HOST</code> - Sets the hostname for the Redis server.</li> <li><code>REDIS_PORT</code> - Sets the port for the Redis server.</li> <li><code>REDIS_PASSWORD</code> - Sets the password for the Redis server.</li> </ul>"},{"location":"environment/#pgadmin","title":"Pgadmin","text":"<ul> <li><code>PGADMIN_DEFAULT_EMAIL</code> - Sets the default email for the pgadmin 4 management server.</li> <li><code>PGADMIN_DEFAULT_PASSWORD</code> - Sets the default password for the pgadmin 4 management server.</li> </ul>"},{"location":"environment/#jupyter-notebook","title":"Jupyter notebook","text":"<ul> <li><code>JUPYTER_HOST</code> - Sets the jupyter notebook host.</li> <li><code>JUPYTER_PORT</code> - Sets the jupyter notebook port.</li> <li><code>JUPYTER_TOKEN</code> - Sets the jupyter notebook token (auth token).</li> <li><code>JUPYTER_USE_VOLUME</code> - Enable/Disable the optional volume, that mounts the home directory (work directory) of the jupyter notebook user.</li> <li><code>JUPYTER_BIND_LOCALHOST_ONLY</code> - Enable/Disable optional value to force jupyter notebook to be accessible only from localhost.</li> </ul>"},{"location":"environment/#refresh-tokens","title":"Refresh tokens","text":"<ul> <li><code>JWT_SECRET</code> - JWT secret for client authentication. You can generate one with the following command: <code>openssl rand -base64 64</code>.</li> <li><code>COOKIE_PATH</code> - Sets where the cookie is valid.</li> <li><code>COOKIE_DOMAIN</code> - Specifies which domain the cookie belongs to.</li> <li><code>COOKIE_DOMAIN</code> - Sets the cookie domain.</li> <li><code>REFRESH_SECURE</code> - Enable/Disable mandatory HTTPS for cookies.</li> <li><code>REFRESH_HTTP</code> - Enable/Disable HTTP-Only cookies.</li> <li><code>MODULE_UPLOAD_PATH</code> - Sets the path where modules are uploaded. If not set, the server will default to <code>./teamserver/modules</code>.</li> </ul>"},{"location":"environment/#ssltls-certificates","title":"SSL/TLS Certificates","text":"<ul> <li><code>CERT_UPLOAD_PATH</code> - Sets the default path where certificates are uploaded. If not set, the server will default to <code>./teamserver/certs</code>.</li> </ul>"},{"location":"installation-and-config/","title":"Installation","text":""},{"location":"installation-and-config/#requirements","title":"Requirements","text":"<ul> <li>Docker engine</li> </ul>"},{"location":"installation-and-config/#installation_1","title":"Installation","text":"<p>Install the teamserver source code using the following command and enter the directory:</p> <pre><code>git clone https://github.com/ksel172/Meduza\ncd Meduza/teamserver\n</code></pre> <p>Create a <code>.env</code> file with the basic server configuration. The project ships with a <code>.env.example</code> file for an example configuration. To view it, go to <code>teamserver/.env.example</code> or visit the environment page.</p> <p>After creating the <code>.env</code> file, run the docker compose file using the following command (Replace the .env file with the name of the file you created):</p> <pre><code>docker compose --env-file .env up --force-recreate --build\n</code></pre> <p>NOTE: This section is still WIP due to plans to potentially containerize the client. Also, clients are ran using a dev version currently. An installation guide must be added if the client is moved out to a different repository.</p> <p>after starting the teamserver, launch the client application using: <pre><code>npm run dev\n</code></pre></p>"},{"location":"installation-and-config/#configuration","title":"Configuration","text":"<p>NEED SOME IMAGES OF THE UI HERE</p> <p>Log into the client using the default credentials: <code>Meduza:Meduza</code>. After doing so, it is highly suggested you go to the settings and configure some new users, as well as change the admin user by configuring a new user with admin access and removing the default one.</p>"},{"location":"listener-api/","title":"Listener API","text":""},{"location":"listener-api/#overview","title":"Overview","text":"<p>The Listener API in Meduza provides functionality to create, manage, and interact with C2 (Command and Control) infrastructure. This API supports multiple listener types (HTTP, TCP, SMB, and external) and handles their lifecycle.</p>"},{"location":"listener-api/#ui-endpoints-client-facing","title":"UI endpoints (Client facing)","text":"<p>These requests are handled by the frontend. They remain approximately the same for different kinds but the documentation will be using the <code>http</code> listener for demonstration. To perform the requests, the user must be authenticated to the teamserver using a JWT token. If the requests are performed using Postman or some other tool (like curl), the user will need to provide an authentication token in the request header as a <code>Bearer</code> token.</p>"},{"location":"listener-api/#create-a-listener","title":"Create a Listener","text":"<p>Creates a new listener configuration.</p> <p>Endpoint: <code>POST /api/v1/listeners</code></p> <p>Request Body: <pre><code>{\n  \"kind\": \"http\",\n  \"name\": \"primary-listener\",\n  \"description\": \"Main HTTP listener\",\n  \"heartbeat\": 60\n}\n</code></pre> Successful Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Listener created\",\n  \"data\": null\n}\n</code></pre></p>"},{"location":"listener-api/#get-all-listeners","title":"Get All Listeners","text":"<p>Retrieves a list of all configured listeners.</p> <p>Endpoint: <code>GET /api/v1/listeners</code></p> <p>Request Body:</p> <p>No body is required to perform the request.</p> <p>Successful Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Listeners retrieved successfully\",\n  \"data\": [\n    {\n      \"id\": \"f8d7e9a1-c4b6-4a8c-9e2d-3f5c7b9e8a1d\",\n      \"kind\": \"http\",\n      \"status\": \"running\",\n      \"name\": \"primary-listener\",\n      \"description\": \"Main HTTP listener\",\n      \"external\": false,\n      \"host\": \"localhost\",\n      \"port\": 8010,\n      \"heartbeat\": 60,\n      \"config\": {... kind specific config ... },\n      \"created_at\": \"2024-09-12T15:30:45Z\",\n      \"updated_at\": \"2024-09-12T15:30:45Z\",\n      \"started_at\": \"2024-09-12T15:31:05Z\",\n      \"stopped_at\": null\n    },\n...\n  ]\n}\n</code></pre></p>"},{"location":"listener-api/#get-listener-by-id","title":"Get Listener by ID","text":"<p>Retrieves a specific listener by ID.</p> <p>Endpoint: <code>GET /api/v1/listeners/{listener_id}</code></p> <p>Request Body:</p> <p>No body is required to perform the request.</p> <p>Successful Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Listener retrieved successfully\",\n  \"data\": {\n    \"id\": \"f8d7e9a1-c4b6-4a8c-9e2d-3f5c7b9e8a1d\",\n    \"kind\": \"http\",\n    \"status\": \"running\",\n    \"name\": \"primary-listener\",\n    \"description\": \"Main HTTP listener\",\n    \"external\": false,\n    \"host\": \"localhost\",\n    \"port\": 8010,\n    \"heartbeat\": 60,\n    \"config\": {},\n    \"created_at\": \"2024-09-12T15:30:45Z\",\n    \"updated_at\": \"2024-09-12T15:30:45Z\",\n    \"started_at\": \"2024-09-12T15:31:05Z\",\n    \"stopped_at\": null\n  }\n}\n</code></pre></p>"},{"location":"listener-api/#get-listener-by-name","title":"Get Listener by Name","text":"<p>Retrieves a specific listener by name.</p> <p>Endpoint: <code>GET /api/v1/listeners/{listener_name}</code></p> <p>Request Body:</p> <p>No body is required to perform the request.</p> <p>Successful Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Listener retrieved successfully\",\n  \"data\": {\n    \"id\": \"f8d7e9a1-c4b6-4a8c-9e2d-3f5c7b9e8a1d\",\n    \"kind\": \"http\",\n    \"status\": \"running\",\n    \"name\": \"primary-listener\",\n    \"description\": \"Main HTTP listener\",\n    \"external\": false,\n    \"host\": \"localhost\",\n    \"port\": 8010,\n    \"heartbeat\": 60,\n    \"config\": {},\n    \"created_at\": \"2024-09-12T15:30:45Z\",\n    \"updated_at\": \"2024-09-12T15:30:45Z\",\n    \"started_at\": \"2024-09-12T15:31:05Z\",\n    \"stopped_at\": null\n  }\n}\n</code></pre></p>"},{"location":"listener-api/#get-listener-statuses","title":"Get Listener Statuses","text":"<p>Retrieves the status of all listeners.</p> <p>Endpoint: <code>GET /api/v1/listeners/statuses</code></p> <p>Request Body:</p> <p>No body is required to perform the request.</p> <p>Successful Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Listeners retrieved successfully\",\n  \"data\": {\n    \"f8d7e9a1-c4b6-4a8c-9e2d-3f5c7b9e8a1d\": \"running\",\n    \"a1b2c3d4-e5f6-7a8b-9c0d-e1f2a3b4c5d6\": \"ready\"\n  }\n}\n</code></pre></p>"},{"location":"listener-api/#start-listener","title":"Start Listener","text":"<p>Start a specific listener.</p> <p>Endpoint: <code>POST /api/v1/listeners/{listener_id}/start</code></p> <p>Request Body:</p> <p>No body is required to perform the request.</p> <p>Successful Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Successfully started listener with ID: f8d7e9a1-c4b6-4a8c-9e2d-3f5c7b9e8a1d\",\n  \"data\": null\n}\n</code></pre></p>"},{"location":"listener-api/#stop-listener","title":"Stop Listener","text":"<p>Stop a specific listener.</p> <p>Endpoint: <code>POST /api/v1/listeners/{listener_id}/stop</code></p> <p>Request Body:</p> <p>No body is required to perform the request.</p> <p>Successful Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Successfully stopped listener with ID: f8d7e9a1-c4b6-4a8c-9e2d-3f5c7b9e8a1d\",\n  \"data\": null\n}\n</code></pre></p>"},{"location":"listener-api/#terminate-listener","title":"Terminate Listener","text":"<p>Terminate and remove a specific listener.</p> <p>Endpoint: <code>DELETE /api/v1/listeners/{listener_id}</code></p> <p>Request Body:</p> <p>No body is required to perform the request.</p> <p>Successful Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Listener deleted successfully\",\n  \"data\": null\n}\n</code></pre></p>"},{"location":"listener-api/#update-listener","title":"Update Listener","text":"<p>Update a listener's configuration.</p> <p>Endpoint: <code>PUT /api/v1/listeners/</code></p> <p>Request Body: <pre><code>{\n  \"id\": \"f8d7e9a1-c4b6-4a8c-9e2d-3f5c7b9e8a1d\",\n  \"name\": \"primary-listener\",\n  \"description\": \"Updated HTTP listener description\",\n  \"config\": {\n    \"read_timeout\": 30,\n    \"write_timeout\": 30\n  }\n}\n</code></pre></p> <p>Successful Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Successfully updated listener f8d7e9a1-c4b6-4a8c-9e2d-3f5c7b9e8a1d\",\n  \"data\": null\n}\n</code></pre></p>"},{"location":"listener-api/#external-listener-endpoints","title":"External Listener Endpoints","text":"<p>External listener endpoints are meant for externally deployed listeners to register and integrate themselves with the teamserver</p>"},{"location":"listener-api/#register-external-listener","title":"Register External Listener","text":"<p>Registers an external listener with the teamserver.</p> <p>Endpoint: <code>POST /external/register</code></p> <p>Request Body:</p> <p>Successful Response:</p> <p>W.I.P.</p>"},{"location":"listeners/","title":"Listeners","text":""},{"location":"listeners/#overview","title":"Overview","text":"<p>The Listeners are one of the core components of Meduza. They handle inbound and requests to/from agents. The Listener component is constructed from a several parts for lifecycle management, database operations and external listener management. </p> <p>To learn how to operate the listeners, visit the Listener API documentation</p>"},{"location":"listeners/#authentication","title":"Authentication","text":"<ul> <li>UI Endpoints: Require standard user authentication via JWT token</li> <li>External Listener Endpoints: Require listener-specific authentication</li> </ul>"},{"location":"listeners/#listener-kind","title":"Listener Kind","text":"Kind Description http Default HTTP/HTTPS based listener. tcp Default TCP based listener. smb Default SMB protocol based listener (for pivoting). external External listener. Managed separately but registered with the teamserver. The kind depends on what listener is registered. If a discord listener, kind will be <code>discord</code>."},{"location":"listeners/#listener-states","title":"Listener States","text":"State Description pending No resources created, waiting for signal to start. ready Idle, waiting for initialization/start. starting Listener is in the process of starting. running Listener is active and accepting connections. stopping Listener is in the process of stopping. terminating Resources are being cleaned up. failed Operation failed, requires cleanup and restart."}]}